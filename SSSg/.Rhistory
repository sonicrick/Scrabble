pm
View(tips)
pm <- ggpairs(tips)
View(tips)
pm
pm <- ggpairs(tips, upper = "blank")
str(pm)
pm
pm <- ggpairs(
diamonds.samp[,1:3],
upper = list(continuous = "density", combo = "box"),
lower = list(continuous = "points", combo = "dot"),
color = "cut",
title = "Diamonds")
data(diamonds, package="ggplot2")
diamonds.samp <- diamonds[sample(1:dim(diamonds)[1],200),]
pm <- ggpairs(
diamonds.samp[,1:3],
upper = list(continuous = "density", combo = "box"),
lower = list(continuous = "points", combo = "dot"),
color = "cut",
title = "Diamonds"
)
pm
pm <- ggpairs(tips[,1:3], axisLabels="none")
pm
a <- runif(1:10)
a <- numeric(runif(1:10), runif(50:70))
?numeric
a <- vector(runif(1:10), runif(50:70))
a <- matrix(runif(1:10), ncol = 2)
a
b <- matrix(sample(1:10), ncol = 2)
b
library(TeachingDemos)
pairs2(a,b)
View(pairs2)
edit(pairs2)
library(TeachingDemos)
a <- matrix(runif(1:10), ncol = 2)
b <- matrix(sample(1:10), ncol = 2)
pairs2(a,b)
dimnames(a)
dimnames(a) = list("% correct answer", "% time spent")
?dimnames
dimnames(a) <- list("% correct answer", "% time spent")
dimnames(a)[1] <- "% correct answer"
dimnames(a)[] <- list("% correct answer", "%time spent")
a
dimnames(a)[] <- list("Ratio of correct answer", "Ratio of time spent")
a
dimnames(a)[,1:2] <- list("Ratio of correct answer", "Ratio of time spent")
dimnames(a)[1:2] <- list("Ratio of correct answer", "Ratio of time spent")
colnames(a) <- list("Ratio of correct answer", "Ratio of time spent")
a
colnames(b) <- c("Hours spent per study session", "Frequency of study per week")
b
pairs2(a, b)
colnames(a) <- c("Ratio of correct answer", "Ratio of time spent")
pairs2(a, b)
?melt
str(tips)
head(melt(tips))
tipm <- melt(tips)
str(tipm)
?norm
?pnorm
pnorm(.98)
dnorm(.98)
dnorm(.99)
pnorm(.99)
qnorm(.99)
qnorm(.68)
qnorm(.67)
qnorm(.90)
qnorm(.95)
(2.34*300/40)^2
?scale
(2.345*300/40)^2
(2.335*300/40)^2
(2.334*300/40)^2
pnorm((30.69-32)/4.31)
pnorm(0.05)
pnorm(0.5
)
qnorm(0.5)
qnorm(100)
qnorm(1)
dnorm(1)
pnorm(.9)
qnorm(.9)
pnorm((30.69-32)/(4.31/6))
z <- pnorm((30.69-32)/(4.31/6))
pnorm(-1.73)
pnorm(30.69, mean=32, sd = 4.31)
pnorm(.3806)
pnorm((-.3806)
)
pnorm(-.3806)*2
qnorm(.05)
s <- 4.31/6
rg <- qnorm(.05)
30.69 + s*rg
30.69 - s*rg
pnorm(30.69, mean = 32, sd = s)
pnorm(30.69, mean = 32, sd = s) * 2
qnorm(.05)
z <- 4/(17/sqrt(35))
z
p(z)
pnorm(z)
2*(1-pnorm(z))
load(url("http://www.openintro.org/stat/data/ames.RData"))
View(ames)
area <- ames$Gr.Liv.Area
price <- ames$SalePrice
summary(area)
hist(area)
length(area < 1500)
nrow(area < 1500)
length(area < 1442)
count(area<1442)
length(area[area < 1442])
length(area[area < 1500])
samp0 <- sample(area, 50)
samp1 <- sample(area, 50)
summary(samp1)
summary(area)
summary(samp1)
hist(samp1)
mean(samp1)
sample_means50 <- rep(NA, 5000)
for (i in 1:5000) f
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
g
hist(sample_means50)
sample_means50 <- rep(NA, 5000)
for (i in 1:5000) {
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
g
hist(sample_means50)
}
sample_means50 <- rep(NA, 5000)
for (i in 1:5000) {
samp <- sample(area, 50)
sample_means50[i] <- mean(samp)
}
hist(sample_means50)
summary(sample_means50)
summary(area)
sample_means10 <- rep(NA, 5000)
sample_means100 <- rep(NA, 5000)
for (i in 1:5000) {
samp <- sample(area, 10)
sample_means10[i] <- mean(samp)
samp <- sample(area, 100)
sample_means100[i] <- mean(samp)
}
par(mfrow = c(3, 1))
xlimits = range(sample_means10)
hist(sample_means10, breaks = 20, xlim = xlimits)
hist(sample_means50, breaks = 20, xlim = xlimits)
hist(sample_means100, breaks = 20, xlim = xlimits)
samp_price <- sample(price, 50)
summary(samp_price)
sample_means50 < rep(NA, 5000)
sample_means50 <- rep(NA, 5000)
for (i <- 1:5000) { sample_means50[i] <- mean(sample(price, 50))}
for (i in 1:5000) { sample_means50[i] <- mean(sample(price, 50))}
summary(sample_means50)
hist(sample_means50)
for (i in 1:5000) { sample_means150[i] <- mean(sample(price, 150))}
sample_means150 <- rep(NA, 5000)
for (i in 1:5000) { sample_means150[i] <- mean(sample(price, 150))}
hist(sample_means150)
population <- ames$Gr.Liv.Area
samp <- sample(population, 60)
summary(samp)
hist(Samp)
hist(samp)
sample_mean <- mean(samp)
se <- sd(samp)/sqrt(60)
lower <- sample_mean - 1.96 * se
upper <- sample_mean + 1.96 * se
c(lower, upper)
mean(population)
samp_mean <- rep(NA, 50)
samp_sd <- rep(NA, 50)
n <- 60
for(i in 1:50){
samp <- sample(population, n) # obtain a sample of size n = 60 from the population
samp_mean[i] <- mean(samp) # save sample mean in ith element of samp_mean
samp_sd[i] <- sd(samp) # save sample sd in ith element of samp_sd
}
lower <- samp_mean - 1.96 * samp_sd/sqrt(n)
upper <- samp_mean + 1.96 * samp_sd/sqrt(n)
c(lower[1], upper[1])
plot_ci(lower, upper, mean(population))
par(mfrow = c(1,1))
plot_ci(lower, upper, mean(population))
?plot_ci
edit(plot_Ci)
edit(plot_ci)
qnorm(.025)
qnorm(.005)
lower <- samp_mean - 2.58 * samp_sd/sqrt(n)
upper <- samp_mean + 2.58 * samp_sd/sqrt(n)
plot_ci(lower, upper, mean(population))
library(tree)
install.packages("tree")
install.packages("rf")
install.packages("RandomForest")
install.packages("randomForest")
?rf
?randomForest
library(randomForest)
?randomForest
source('~/My Dropbox/competitions/prudential/R/submissionpredict.R')
install.packages("lubridate")
source('~/My Dropbox/competitions/prudential/R/submissionpredict.R')
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?llines
?print.trellis
?trellis.par.set
library(datasets)
library(ggplot2)
data(airquality)
str(airquality)
?qplot
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
totplus <- (.997*.001)+(.015*.999)
(.997*.001)/totplus
1-.985
.224/.4
5/16
5/32
1/120
sqrt(1/120)
?ppois
ppois(3, 5)
data(sleep)
head(sleep)
g1 <- sleep$extra[1:10]
g2 <- sleep$extra[11:20]
difference <- g2 - g1
mn <- mean(difference)
mn
s <- sd(difference)
n <- 10
mn + c(-1, 1) * qt(0.975, n - 1) * s/sqrt(n)
?pnorm
pnorm(14, 15, 1)
pnorm(16, 15, 1)
pnorm(16, 15, 1) - pnorm(14, 15, 1)
1/12
sqrt(1/12)
sqrt(1/12/10)
5*0.5^5
6*0.5^5
.75*.3
.48*.7
.225/(.225+.336)
1.645*75 +1100
?pnorm
pnorm(.95, 1100, 75)
dnorm(.95, 1100, 75)
qnorm(.5, 1100, 75)
pnorm(1100, 1100, 75)
dnorm(1100, 1100, 75)
dnorm(0.5, 1100, 75)
dnorm(1100, 1100, 75)
dnorm(1250)
dnorm(1250, 1100, 75)
dnorm(950, 1100, 75)
qnorm(.95, 1100, 75)
1.645*75 + 1100
qnorm(.95, 1100, 7.5)
1/120
sqrt(1/12)/10
sqrt(1/12/10)
sqrt(1/12)/10
sqrt(1/12/10000)
ppois(10, 5*3)
?factorial
factorial(3)
(15^10)*exp(-15)/factorial(10)
demo()
?ls
ls()
?rm
?unlink
?foo
?axis
?lapply
?stack
require(stats)
formula(PlantGrowth)
?PlantGrowth
pg <- unstack(PlantGrowth)
View(pg)
PlantGrowth
stack(pg)
library(ggplot2)
?geom_bar
?sqldf
library(sqldf)
?sqldf
library(data.table)
?setkey
?facet_wraP
?facet_wraP
?facet_wrap
d <- ggplot(diamonds, aes(carat, price, fill = ..density..)) +
xlim(0, 2) + stat_binhex(na.rm = TRUE) + theme(aspect.ratio = 1)
print(d)
d + facet_wrap(~ color)
d + facet_wrap(~ color, ncol = 1)
d + facet_wrap(~ color, nrow = 3)
d + facet_wrap(~ color + cut)
?ggsave
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
?minimise
?solve
?lm
lsfit
?lsfit
lm(w~x)
?cor
plot(x, w)
?seq
?double
mu <- seq(-1, 1, by=.05)
plot(w*(x-mu)^2, mu)
for (i in mu) {mum <- sum(w*(x-mu[i])^2)}
mum<=double(length(mu))
for (i in mu) {mum[i] <- sum(w*(x-mu[i])^2)}
str(mum)
mum<-double(41)
for (i in seq_along(mu)) {mum[i] <- sum(w*(x-mu[i])^2)}
sum(w*(x+1)^2)
plot(mu, mum)
mu <- seq(0, .5, by=.005)
for (i in seq_along(mu)) {mum[i] <- sum(w*(x-mu[i])^2)}
plot(mu, mum)
?min
?which
which(mum==min(mum))
mu[30]
mu <- seq(0, .5, by=.0005)
for (i in seq_along(mu)) {mum[i] <- sum(w*(x-mu[i])^2)}
plot(mu, mum)
mu[which(mum==min(mum))]
mu <- seq(0.1, .2, by=.0001)
for (i in seq_along(mu)) {mum[i] <- sum(w*(x-mu[i])^2)}
plot(mu, mum)
mu[which(mum==min(mum))]
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x,y)
sd(y)
cor(y,x)*sd(y)/sd(x)
data(mtcars)
mt <-lm(mtcars, mpg ~ weight)
?lm
mt <-lm(mtcars, mpg ~ weight)
mt <-lm(mpg ~ weight, mtcars)
str(mtcars)
mt <-lm(mpg ~ wt, mtcars)
summary(mt)
mt
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xn <- x-mean(x)
xn
xn <- xn/sd(x)
mean(xn)
sd(xn)
xn
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
plot(x, x)
mean(x)
cor(x,x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
cor(x,y)
cor(y,x)
?cor
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
?lsfit
ls(x, y)
lsfit(x, y)
lsfit(x, y, intercept=FALSE)
?dist
t
?t
?hCluster
?hcluster
?hclust
?reformulate
data (mtcars)
mt <- lm(mpg ~ wt, data=mtcars, interval="prediction", level=.75)
mt <- lm(mpg ~ wt, data=mtcars)
mti <- lm(mpg, data=mtcars)
mta <- mean(mtcars$mpg)
yhat <- predict(mt, mtcars, level=.75, interval="prediction")
y <- mtcars$wt
yhat[1,
]
head(yhat)
yhat1 <- yhat[,1]
y <- mtcars$mpg
sum((y-yhat1)^2)/sum((y-mta)^2)
beta1 <- cor(mtcars$mpg, mtcars$wt)*sd(mtcars$mpg)/sd(mtcars$wt)
beta1
beta0 <- mean(mtcars$mpg)-beta1*mean(mtcars$wt)
beta0
mta
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
?manipulate
library(rCharts)
import(rCharts)
import.packages("rCharts")
import.package("rCharts")
?import.package
install.packages("rCharts")
library(rCharts)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages(“devtools”)
install.packages(“devtools”)
install.packages("devtools")
(.99*.001)/(.99*.001 + .01*.999)
install.packages("devtools")
library(devtools)
install.packages("Rtools")
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
?women
?sleep
?iris
?animals
require(MASS)
?animals
?Animals
?geyser
?survey
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='sonicrick', token='C2422309D8A0ED35F6015625E8316388', secret='8cBNhmxhHF2lTX3NjcCxT2gYT8UMHpyTvIcfuJjm')
library(shiny)
library(Shiny)
install.packages("shiny")
library(shiny)
shinyapps::setAccountInfo(name='sonicrick', token='C2422309D8A0ED35F6015625E8316388', secret='8cBNhmxhHF2lTX3NjcCxT2gYT8UMHpyTvIcfuJjm')
?shinyUI
library(shinyapps)
deployApp()
?lm
?show
?dcast
?dgamma
?getMethod
?getClass
?showMethod
?showMethods
?lm
?show
?predict
?dgamma
?lm
?dvast
?dcast
?sample
set.seed(12345)
pairing <- 5:15
pairseq <- sample (pairing, 11)
pairseq
?zscore
?ztest
?pnorm
qnorm(0.915583776, mean=44.8, sd=5.679436592, lower.tail=FALSE)
pnorm(0.915583776, mean=44.8, sd=5.679436592, lower.tail=FALSE)
qnorm(0.915583776, lower.tail=FALSE)
pnorm(0.915583776, lower.tail=FALSE)
pnorm(0.915583776)
source('~/GitHub/Scrabble/SSSg/process_SSSg.R')
setwd("~/GitHub/Scrabble/SSSg")
source('~/GitHub/Scrabble/SSSg/process_SSSg.R')
warnings()
source('~/GitHub/Scrabble/SSSg/process_SSSg.R')
source('~/GitHub/Scrabble/SSSg/process_SSSg.R')
source('~/GitHub/Scrabble/SSSg/process_SSSg.R')
source('~/GitHub/Scrabble/SSSg/process_SSSg.R')
2.869/3.008
10/13
