setwd("~/GitHub/Scrabble/Nationals 2014")
source('~/GitHub/Scrabble/bingoPlayability.R')
csc.bingos <- read.csv(bingofile, stringsAsFactors=FALSE)
setwd("~/GitHub/Scrabble/Nationals 2014")
bingofile <- "Nationals 2014 Bingos.csv"
csc.bingos <- read.csv(bingofile, stringsAsFactors=FALSE)
names(csc.bingos) <- tolower(names(csc.bingos))
csc.bingos$phoney <- grepl("\\*", csc.bingos$bingo)
csc.bingos$bingo <- gsub("\\*", "", csc.bingos$bingo)
csc.bingos$length <- nchar(csc.bingos$bingo)
csc.b.sum <- ddply(csc.bingos, .(player, round), summarise,
bingo.count = length(bingo),
bingo.points = sum(score, na.rm=TRUE))
library(plyr)
csc.b.sum <- ddply(csc.bingos, .(player, round), summarise,
bingo.count = length(bingo),
bingo.points = sum(score, na.rm=TRUE))
source('~/GitHub/Scrabble/bingoPlayability.R')
bingos <- bingoPlayability(bingos)
setwd("~/GitHub/Scrabble/Nationals 2014")
tourney <- "Nationals 2014"
bingofile <- paste(tourney, "bingos.csv")
bingos <- read.csv(bingofile, stringsAsFactors=FALSE)
names(bingos) <- tolower(names(bingos))
bingos$phoney <- grepl("\\*", bingos$bingo)
bingos$bingo <- gsub("\\*", "", bingos$bingo)
bingos$length <- nchar(bingos$bingo)
source('~/GitHub/Scrabble/bingoPlayability.R')
bingos <- bingoPlayability(bingos)
write.csv(bingos, file=paste(tourney, "bingo records.csv"), row.names=FALSE)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
?train
library(caret)
?train
rfmod <- train(y~., data=vowel.train, method="rf")
set.seed(33833)
gbmmod <- train(y~., data=vowel.train, method="gbm")
?predict
rfpred <- predict(vowel.test, rf)
rfpred <- predict(rf, data=vowel.test)
rfpred <- predict(rfmod, data=vowel.test)
?predict.rf
rfpred <- predict(rfmod, vowel.test)
gbmpred <- predict(gbmmod, vowel.test)
agreepred <- rfpred==gbmpred
sum(agreepred)/length(agreepred)
sum(agreepred)
correctpred <- vowel.test$y[agreepred] == rfpred[agreepred]
sum(correctpred)/length(correctpred)
rfmod
gbmmod
set.seed(33833)
rfmod <- train(y~., data=vowel.train, method="rf")
gbmmod <- train(y~., data=vowel.train, method="gbm", verbose=FALSE)
?confusionMatrix
rfpred <- predict(rfmod, vowel.test)
gbmpred <- predict(gbmmod, vowel.test)
rfmod
gbmmod
confusionMatrix(rfpred, vowel.test$y)
confusionMatrix(gbmpred, vowel.test$y)
sum(correctpred)/length(correctpred)
confusionMatrix(rfpred[rfpred==gbmpred], vowel.test$y)
confusionMatrix(rfpred[agreepred], vowel.test$y[agreepred])
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
?AlzheimerDisease
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfmod <- train(diagnosis~., data=training, method="rf")
gbmmod <- train(diagnosis~., data=training, method="gbm", verbose=FALSE)
ldamod <- train(diagnosis~., data=training, method="lda")
?gam
install.packages("mgcv")
library(mgcv)
?gam
rfpred <- predict(rfmod, testing)
gbmpred <- predict(gbmmod, testing)
ldapred <- predict(ldamod, testing)
?ensembke
?ensemble
ensemble <- data.frame(rfpred, gbmpred, ldapred, diagnosis=testing$diagnosis)
ensembleFit <- train(diagnosis~., method="gam", data=ensemble)
ensemblePred <- predict(ensembleFit, ensemble)
confusionMatrix(rfpred, testing$diagnosis)
confusionMatrix(gbmpred, testing$diagnosis)
confusionMatrix(ldapred, testing$diagnosis)
confusionMatrix(ensemblePred, ensemble$diagnosis)
View(ensemble)
ensembleFit
ensemblemod <- train(diagnosis ~., method="gam", data=ensemble)
ensemblemod
ensembleFit <- train(diagnosis~., method="rf", data=ensemble)
ensemblePred <- predict(ensembleFit, ensemble)
confusionMatrix(ensemblePred, ensemble$diagnosis)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
str(concrete)
set.seed(233)
lassomod <- train(CompressiveStrength ~ ., data=training, method="lasso")
?plot.enet
lassomod
plot.enet(lassomod)
?train.lasso
?lasso
?enet
str(lassomod)
summary(lasso)
summary(lassomod)
summary(lassomod$actions)
str(lassomod$actions)
lassomod$actions
str(lassomod$FinalModel)
str(lassomod$finalModel)
plot.enet(lassomod$finalModel)
plot.enet(lassomod$finalModel, xvar="penalty", use.color=TRUE)
?bats()
?bats
install.packages("forecast")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)  # For year() function below
dat = read.csv("~/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecaset)
library(forecast)
?bats
View(training)
?forecast
tsbats <- bats(training)
str(USAccDeaths)
?ts
tsdat <- ts(training)
tsbats <- bats(tstrain)
?ets
tsfcast <- forecast(tsbats)
plot(tsfcast)
str(tsdat)
str(tsdat$date)
plot(decompose(tsfcast))
?tsfcast
str(tsfcast)
plot(decompose(tsfcast$fitted.values))
plot(decompose(tsfcast$fitted))
tsfcast$fitted.values
tsfcast$residuals
View(testing)
?forecast
tsfcast <- forecast(tsbats, h=600)
plot(tsfcast)
tsfcast <- forecast(tsbats, h=235)
plot(tsfcast)
str(tsfcast)
plot(tsfcast); lines(ts(testing$visitsTumblr), col="red")
summary(tsfcast$pred[,2])
tsfcast$pred[,2]
summary(tsfcast$upper[,2])
sum(testing$visitsTumblr <= tsfcast$upper[,2])
226/235
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages(" e1071")
install.packages("e1071")
?svm\
?svm
set.seed(325)
svmmod <- svm(CompressiveStrength, data=training)
svmmod <- svm(CompressiveStrength~., data=training)
svmmod
svmpred <- predict(svmmod, testing)
str(svmpred)
?rmse
?root
?sqrt
rmse.val <- sqrt(mean((svmpred-testing$CompressiveStrength)^2))
rmse.val
?accuracy
accuracy(svmpred, testing$CompressiveStrength)
oad the concrete data with the commands:
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
svmmod <- svm(CompressiveStrength~., data=training)
svmpred <- predict(svmmod, testing)
accuracy(svmpred, testing$CompressiveStrength)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rfmod <- train(diagnosis~., data=training, method="rf")
gbmmod <- train(diagnosis~., data=training, method="gbm")
ldamod <- train(diagnosis~., data=training, method="lda")
rfpred <- predict(rfmod, testing)
gbmpred <- predict(gbmmod, testing)
ldapred <- predict(ldamod, testing)
predDF <- data.frame(rfpred, gbmpred, ldapred, diagnosis=testing$diagnosis)
accuracy(rfpred, testing$diagnosis)
?confusionMatrix
stackmod <- train(diagnosis~., data=predDF, method="rf")
stackpred <- predict(stackmod, predDF)
confusionMatrx(rfpred, testing$diagnosis)
confusionMatrix(rfpred, testing$diagnosis)
confusionMatrix(gbmpred, testing$diagnosis)
confusionMatrix(ldapred, testing$diagnosis)
confusionMatrix(stackpred, testing$diagnosis)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
stacktrain <- data.frame(rfpred=predict(rfmod, training),
gbmpred=predict(gbmmod, training),
ldapred=predict(ldamod, training),
diagnosis=training$diagnosis)
stackmod <- train(diagnosis~., data=stacktrain, method="rf")
rfpred <- predict(rfmod, testing)
gbmpred <- predict(gbmmod, testing)
ldapred <- predict(ldamod, testing)
predDF <- data.frame(rfpred, gbmpred, ldapred, diagnosis=testing$diagnosis)
stackpred <- predict(stackmod, predDF)
confusionMatrix(rfpred, testing$diagnosis)$overall
confusionMatrix(gbmpred, testing$diagnosis)$overall
confusionMatrix(ldapred, testing$diagnosis)$overall
confusionMatrix(stackpred, testing$diagnosis)$overall
source('~/.active-rstudio-document', echo=TRUE)
confusionMatrix(rfpred, testing$diagnosis)
confusionMatrix(gbmpred, testing$diagnosis)
